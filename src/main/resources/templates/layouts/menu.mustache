<section id="about">
    <div class="list-button">
        <button id="button-all">기본 순</button>
        <button id="button-1">북마크</button>
    </div>

    <div class="about">
        {{#store}}
        <div class="about__card category-1 box">
            <a href="/owner/store/{{id}}" class="store-click" onclick="redirectToStore('{{id}}')">
            <div class="about-store">
                    <div>
                        <img src="/images/{{storeFileEntity.id}}" width="100%" height="150">
                    </div>

<!--                    <div th:each="imageFile : ${all} ">-->
<!--                        <img  th:src="|/images/${imageFile.id}|" width="150" height="150">-->
<!--                        <p th:text="${imageFile.orgNm}"></p>-->
<!--                    </div>-->



                <a href="javascript:void(0);" class="bookmark">
                    <i class="fa-regular fa-bookmark"></i>
                </a>
            </div>
            <div class="about-store-comment">
                <h2 class="about__title _1">
                    {{name}}
                </h2>

            </div>
            </a>
        </div>

        {{/store}}
    </div>

    <button class="more-btn">더보기</button>
</section>

<script>
    const aboutGrid = document.querySelector('.about');
    const btn = document.querySelector('.more-btn');
    let currentPage = 0; // 초기 페이지 번호
    btn.addEventListener('click', async () => {
        try {
            console.log(currentPage);
            currentPage++; // 클릭할 때마다 페이지 번호 증가
            // 서버에 데이터 요청

            const response = await fetch(`/api/get-more-data?page=${currentPage}&pageSize=8`);
            console.log(response);
            const newData = await response.json();
            console.log("url err:"+newData)

            // 새로운 게시물을 동적으로 생성
            newData.forEach(item => {
                const newPost = document.createElement('div');
                newPost.className = 'about__card category-1 box';

                newPost.innerHTML = `
                <a href="/owner/store/${item.id}" class="store-click" onclick="redirectToStore('${item.id}')">
                <div class="about-store">
                    <a href="javascript:void(0);" class="bookmark">
                        <i class="fa-regular fa-bookmark"></i>
                    </a>
                </div>
                <div class="about-store-comment">
                    <h2 class="about__title _1">${item.name}</h2>
                </div>
                </a>
            `;

                aboutGrid.appendChild(newPost);

            });
            // 새로운 요소를 추가한 후에 about의 높이를 조절
            adjustAboutHeight();
        } catch (error) {
            console.error('Error loading more data:', error);
        }
    });
    async function fetchRenderedHTMLFromServer() {
        try {
            const response = await fetch('/customer/{id}'); // 실제 엔드포인트에 맞게 수정
            const html = await response.text();
            return html;
        } catch (error) {
            console.error('Error fetching rendered HTML:', error);
        }
    }
    function adjustAboutHeight() {
        // 모든 .about__card의 높이를 가져와서 최대 높이를 찾음
        const maxCardHeight = Math.max(
                ...Array.from(document.querySelectorAll('.about__card')).map(card => card.clientHeight)
    );

        // .about의 높이 설정
        aboutGrid.style.height = `${aboutGrid.clientHeight}px`;
        // 공백을 줄이기 위해 스크롤 여부 확인
        const hasOverflow = aboutGrid.scrollHeight > aboutGrid.clientHeight;

        // 스크롤이 필요한 경우에만 스크롤을 활성화
        aboutGrid.style.overflowY = hasOverflow ? 'auto' : 'hidden';
    }

    function redirectToStore(id) {
        // 클릭한 경우의 추가 동작이 필요하다면 여기에 추가 로직을 작성할 수 있습니다.
        // 예를 들어, 특별한 동작이 필요한 경우에만 이 함수를 사용하고,
        // 일반적인 링크 이동은 a 태그 자체에 위임합니다.

        window.location.href = "/owner/store/" + id;
    }
</script>